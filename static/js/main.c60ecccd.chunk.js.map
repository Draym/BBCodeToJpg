{"version":3,"sources":["utils/bbcode-tags/AlignTag.js","utils/BBCodeTools.js","utils/HtmlTools.js","components/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["AlignTag","attributes","align","this","params","className","getComponents","Tag","BBCodeTools","getKeys","correctBBCode","bbcode","replace","correctFinalString","value","keys","index","console","log","RegExp","convertToHtml","parser","registerTag","renderToString","toReact","styles","base","ogame","HtmlTools","addStyling","html","config","customStyle","htmlValue","style","getBaseStyle","convertToJpg","canvas","toDataURL","createCanvasPreview","parent","canvasId","callback","generatePreviewCanvas","context","getContext","clearRect","width","height","rasterizeHTML","then","renderResult","image","drawImage","document","createElement","id","firstChild","removeChild","appendChild","generateDownloadImage","fileName","imageData","tmpLink","download","href","body","click","Home","props","state","imageReady","handleSubmit","bind","handleBBCodeChange","handleConfigChange","handleCustomStyleChange","createDownloadImage","event","setState","target","preventDefault","indexOf","getElementById","classList","add","remove","finalHtml","htmlPreview","createHtmlPreview","success","Container","Row","Col","onSubmit","onChange","type","disabled","readOnly","variant","visibility","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c60ecccd.chunk.js","sourcesContent":["import React from 'react';\nimport {Tag} from \"bbcode-to-react\";\n\nclass AlignTag extends Tag {\n    toReact() {\n        const attributes = {\n            align: this.params.align || null\n        };\n        return (\n            <div className={attributes.align}>{this.getComponents()}</div>\n        );\n    }\n}\n\nexport default AlignTag;","import parser from 'bbcode-to-react';\nimport {renderToString} from 'react-dom/server';\nimport AlignTag from \"./bbcode-tags/AlignTag\";\n\nconst BBCodeTools = {\n    getKeys() {\n        return {'[': '#y-u-y-u#', ']': '#a-s-a-s#'};\n    },\n    correctBBCode(bbcode) {\n        let regex = /\\[\\[(.*)]]/g;\n        return bbcode.replace(regex, this.getKeys()['['] + \"[$1]\" + this.getKeys()[']']);\n    },\n    correctFinalString(value) {\n        const keys = this.getKeys();\n        for (let index in keys) {\n            console.log(keys[index], index);\n            value = value.replace(new RegExp(keys[index], 'g'), index);\n        }\n        return value;\n    },\n    convertToHtml(bbcode) {\n        parser.registerTag('align', AlignTag);\n\n        bbcode = this.correctBBCode(bbcode);\n        let value = renderToString(parser.toReact(bbcode));\n        return this.correctFinalString(value);\n    }\n};\nexport default BBCodeTools;","import * as rasterizeHTML from \"rasterizehtml\";\n\nconst structure = `\n<head>\n<style>\n{{style}}\n</style>\n<title>bbcode2html</title>\n</head>\n<body>\n{{value}}\n</body>\n`;\nconst styles = {\n    base: `/* Custom */\n    body {\n    }\n    \n    /* Default styling */\n    html, body, div, canvas {\n      margin: 0;\n      padding: 0;\n    }\n    .center {\n    margin: auto;\n    text-align: center;\n    }\n    .left {\n    float: left;\n    text-align: center;\n    }\n    .right {\n    float: right;\n    text-align: center;\n    }`,\n    ogame: `body {\n    background-color: #102131;\n    color: #ffffff;\n    font-family: Arial, Helvetica, sans-serif;\n    line-height: 1.28;}`\n};\n\nconst HtmlTools = {\n    addStyling(html, config, customStyle) {\n        //let regex = /<br\\/>(.*?)<br\\/>/g;\n        let htmlValue = html\n            .replace(/(?:\\r\\n|\\r|\\n)/g, '<br/>');\n        //.replace(regex, \"<br/><span>$1</span><br/>\")\n        //.replace(/<span><\\/span>/g, \"\");\n\n\n        let style = styles['base'];\n\n        if (config === 'custom') {\n            style += \"\\n\" + customStyle;\n        } else if (config && config !== \"\" && styles[config]) {\n            style += \"\\n\" + styles[config];\n        }\n        return structure.replace(\"{{style}}\", style).replace(\"{{value}}\", htmlValue);\n    },\n    getBaseStyle() {\n        return styles['base'];\n    },\n    convertToJpg(canvas) {\n        return canvas.toDataURL(\"image/jpg\");\n    },\n    /*\n    * parent: DOM element\n    * canvasId: id of the canvas DOM element\n    * html: html value to render in the canvas\n    * callback: action to execute\n    **/\n    createCanvasPreview(parent, canvasId, html, callback) {\n        let canvas = this.generatePreviewCanvas(parent, canvasId);\n        let context = canvas.getContext(\"2d\");\n        context.clearRect(0, 0, canvas.width, canvas.height);\n        console.log(html);\n        rasterizeHTML.drawHTML(html).then(function (renderResult) {\n            canvas.width = renderResult.image.width;\n            canvas.height = renderResult.image.height;\n            console.log(renderResult.image.width, renderResult.image.height);\n            context.drawImage(renderResult.image, 0, 0);\n            callback(true);\n        });\n    },\n    /*\n    * parent: DOM element\n    * canvasId: id of the canvas DOM element\n    **/\n    generatePreviewCanvas(parent, canvasId) {\n        let canvas = document.createElement(\"canvas\");\n\n        canvas.id = canvasId;\n        while (parent.firstChild) {\n            parent.removeChild(parent.firstChild);\n        }\n        parent.appendChild(canvas);\n        return canvas;\n    },\n    /*\n    * canvas: DOM element\n    * fileName: download file's name\n    **/\n    generateDownloadImage(canvas, fileName) {\n        let imageData = HtmlTools.convertToJpg(canvas);\n        // create temporary link\n        let tmpLink = document.createElement('a');\n        tmpLink.download = fileName;\n        tmpLink.href = imageData;\n        // temporarily add link to body and initiate the download\n        document.body.appendChild(tmpLink);\n        tmpLink.click();\n        document.body.removeChild(tmpLink);\n    }\n};\nexport default HtmlTools;","import React from 'react';\nimport {Container, Col, Row} from 'react-bootstrap';\nimport BBCodeTools from \"../../utils/BBCodeTools\";\nimport HtmlTools from \"../../utils/HtmlTools\";\nimport {Tab, Tabs, TabList, TabPanel} from 'react-tabs';\nimport \"react-tabs/style/react-tabs.css\";\nimport './Home.css';\nimport Button from \"react-bootstrap/Button\";\n\nclass Home extends React.Component {\n\n    canvasId = 'jpgPreview';\n    fileName = 'bbcode2img.jpg';\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            config: '',\n            customStyle: HtmlTools.getBaseStyle(),\n            imageReady: false\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleBBCodeChange = this.handleBBCodeChange.bind(this);\n        this.handleConfigChange = this.handleConfigChange.bind(this);\n        this.handleCustomStyleChange = this.handleCustomStyleChange.bind(this);\n        this.createDownloadImage = this.createDownloadImage.bind(this);\n    }\n\n    /*\n    ** HANDLE EVENT\n    **/\n    handleBBCodeChange(event) {\n        this.setState({bbcode: event.target.value});\n    }\n\n    handleConfigChange(event) {\n        this.setState({config: event.target.value});\n    }\n\n    handleCustomStyleChange(event) {\n        this.setState({customStyle: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n\n        if (this.state.config === 'custom' && this.state.customStyle.indexOf(\"<script\") >= 0) {\n            let input = document.getElementById('customStyleArea');\n            input.classList.add(\"textAreaError\");\n            return;\n        } else {\n            let input = document.getElementById('customStyleArea');\n            input.classList.remove(\"textAreaError\");\n        }\n\n        let html = BBCodeTools.convertToHtml(this.state.bbcode);\n        let finalHtml = HtmlTools.addStyling(html, this.state.config, this.state.customStyle);\n        this.setState({htmlPreview: finalHtml});\n        this.createHtmlPreview(finalHtml);\n    }\n\n    /*\n    ** CREATE\n    **/\n    createHtmlPreview(html) {\n        let parent = document.getElementById(\"react-tabs-3\");\n        HtmlTools.createCanvasPreview(parent, this.canvasId, html, function(success) {\n            this.setState({imageReady: success});\n        }.bind(this))\n    }\n    createDownloadImage() {\n        let canvas = document.getElementById(this.canvasId);\n        HtmlTools.generateDownloadImage(canvas, this.fileName);\n    }\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    <Row>\n                        <h1 className=\"center title\">BBCode 2 Jpeg</h1>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <form onSubmit={this.handleSubmit}>\n                                <label className=\"form-bbcode\">\n                                    <span>BBCode:</span>\n                                    <textarea value={this.state.bbcode}\n                                              onChange={this.handleBBCodeChange}/>\n                                </label>\n                                <label className=\"form-conf\">\n                                    <span>Add configuration:</span>\n                                    <select className=\"form-control\" value={this.state.config} onChange={this.handleConfigChange}>\n                                        <option value=\"\">none</option>\n                                        <option value=\"ogame\">Forum</option>\n                                        <option value=\"custom\">custom</option>\n                                    </select>\n                                </label>\n                                <label\n                                    className={`form-customConf ${this.state.config === 'custom' ? null : 'hidden'}`}>\n                                    Custom configuration:\n                                    <textarea id=\"customStyleArea\" value={this.state.customStyle} onChange={this.handleCustomStyleChange}/>\n                                </label>\n                                <input className=\"form-submit btn btn-secondary\" type=\"submit\" value=\"Generate Jpeg\" disabled={!this.state.bbcode}/>\n                            </form>\n                        </Col>\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <Tabs className=\"previewTab\">\n                                        <TabList>\n                                            <Tab>HTML</Tab>\n                                            <Tab>Jpeg preview</Tab>\n                                        </TabList>\n                                        <TabPanel>\n                                            <textarea className=\"previewHtml\" value={this.state.htmlPreview} readOnly/>\n                                        </TabPanel>\n                                        <TabPanel>\n                                        </TabPanel>\n                                    </Tabs>\n                                </Col>\n                                <Col>\n                                    <Button variant=\"secondary\" className=\"float-right\" type=\"button\"\n                                            style={{visibility: this.state.imageReady ? 'visible' : 'hidden'}}\n                                            onClick={this.createDownloadImage}>Download image</Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Home from \"./components/home/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App-container\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}